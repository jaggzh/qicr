// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: configs.proto

package com.hanhuy.android.irc;

public final class ConfigData {
  private ConfigData() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }
  public static final class Server extends
      com.google.protobuf.GeneratedMessageLite {
    // Use Server.newBuilder() to construct.
    private Server() {
      initFields();
    }
    private Server(boolean noInit) {}
    
    private static final Server defaultInstance;
    public static Server getDefaultInstance() {
      return defaultInstance;
    }
    
    public Server getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    // required string name = 1;
    public static final int NAME_FIELD_NUMBER = 1;
    private boolean hasName;
    private java.lang.String name_ = "";
    public boolean hasName() { return hasName; }
    public java.lang.String getName() { return name_; }
    
    // required bool autoconnect = 2 [default = true];
    public static final int AUTOCONNECT_FIELD_NUMBER = 2;
    private boolean hasAutoconnect;
    private boolean autoconnect_ = true;
    public boolean hasAutoconnect() { return hasAutoconnect; }
    public boolean getAutoconnect() { return autoconnect_; }
    
    // required string server = 3;
    public static final int SERVER_FIELD_NUMBER = 3;
    private boolean hasServer;
    private java.lang.String server_ = "";
    public boolean hasServer() { return hasServer; }
    public java.lang.String getServer() { return server_; }
    
    // required int32 port = 4 [default = 6667];
    public static final int PORT_FIELD_NUMBER = 4;
    private boolean hasPort;
    private int port_ = 6667;
    public boolean hasPort() { return hasPort; }
    public int getPort() { return port_; }
    
    // required bool ssl = 5 [default = false];
    public static final int SSL_FIELD_NUMBER = 5;
    private boolean hasSsl;
    private boolean ssl_ = false;
    public boolean hasSsl() { return hasSsl; }
    public boolean getSsl() { return ssl_; }
    
    // required bool logging = 6 [default = false];
    public static final int LOGGING_FIELD_NUMBER = 6;
    private boolean hasLogging;
    private boolean logging_ = false;
    public boolean hasLogging() { return hasLogging; }
    public boolean getLogging() { return logging_; }
    
    // required string nickname = 7;
    public static final int NICKNAME_FIELD_NUMBER = 7;
    private boolean hasNickname;
    private java.lang.String nickname_ = "";
    public boolean hasNickname() { return hasNickname; }
    public java.lang.String getNickname() { return nickname_; }
    
    // optional string altnick = 8;
    public static final int ALTNICK_FIELD_NUMBER = 8;
    private boolean hasAltnick;
    private java.lang.String altnick_ = "";
    public boolean hasAltnick() { return hasAltnick; }
    public java.lang.String getAltnick() { return altnick_; }
    
    // required string username = 9 [default = "chirrouser"];
    public static final int USERNAME_FIELD_NUMBER = 9;
    private boolean hasUsername;
    private java.lang.String username_ = "chirrouser";
    public boolean hasUsername() { return hasUsername; }
    public java.lang.String getUsername() { return username_; }
    
    // required string realname = 10 [default = "Chirro FTW"];
    public static final int REALNAME_FIELD_NUMBER = 10;
    private boolean hasRealname;
    private java.lang.String realname_ = "Chirro FTW";
    public boolean hasRealname() { return hasRealname; }
    public java.lang.String getRealname() { return realname_; }
    
    // optional string password = 11;
    public static final int PASSWORD_FIELD_NUMBER = 11;
    private boolean hasPassword;
    private java.lang.String password_ = "";
    public boolean hasPassword() { return hasPassword; }
    public java.lang.String getPassword() { return password_; }
    
    // optional string sockshost = 12;
    public static final int SOCKSHOST_FIELD_NUMBER = 12;
    private boolean hasSockshost;
    private java.lang.String sockshost_ = "";
    public boolean hasSockshost() { return hasSockshost; }
    public java.lang.String getSockshost() { return sockshost_; }
    
    // optional int32 socksport = 13;
    public static final int SOCKSPORT_FIELD_NUMBER = 13;
    private boolean hasSocksport;
    private int socksport_ = 0;
    public boolean hasSocksport() { return hasSocksport; }
    public int getSocksport() { return socksport_; }
    
    // optional string socksuser = 14;
    public static final int SOCKSUSER_FIELD_NUMBER = 14;
    private boolean hasSocksuser;
    private java.lang.String socksuser_ = "";
    public boolean hasSocksuser() { return hasSocksuser; }
    public java.lang.String getSocksuser() { return socksuser_; }
    
    // optional string sockspass = 15;
    public static final int SOCKSPASS_FIELD_NUMBER = 15;
    private boolean hasSockspass;
    private java.lang.String sockspass_ = "";
    public boolean hasSockspass() { return hasSockspass; }
    public java.lang.String getSockspass() { return sockspass_; }
    
    // optional string sasluser = 16;
    public static final int SASLUSER_FIELD_NUMBER = 16;
    private boolean hasSasluser;
    private java.lang.String sasluser_ = "";
    public boolean hasSasluser() { return hasSasluser; }
    public java.lang.String getSasluser() { return sasluser_; }
    
    // optional string saslpass = 17;
    public static final int SASLPASS_FIELD_NUMBER = 17;
    private boolean hasSaslpass;
    private java.lang.String saslpass_ = "";
    public boolean hasSaslpass() { return hasSaslpass; }
    public java.lang.String getSaslpass() { return saslpass_; }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      if (!hasName) return false;
      if (!hasAutoconnect) return false;
      if (!hasServer) return false;
      if (!hasPort) return false;
      if (!hasSsl) return false;
      if (!hasLogging) return false;
      if (!hasNickname) return false;
      if (!hasUsername) return false;
      if (!hasRealname) return false;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasName()) {
        output.writeString(1, getName());
      }
      if (hasAutoconnect()) {
        output.writeBool(2, getAutoconnect());
      }
      if (hasServer()) {
        output.writeString(3, getServer());
      }
      if (hasPort()) {
        output.writeInt32(4, getPort());
      }
      if (hasSsl()) {
        output.writeBool(5, getSsl());
      }
      if (hasLogging()) {
        output.writeBool(6, getLogging());
      }
      if (hasNickname()) {
        output.writeString(7, getNickname());
      }
      if (hasAltnick()) {
        output.writeString(8, getAltnick());
      }
      if (hasUsername()) {
        output.writeString(9, getUsername());
      }
      if (hasRealname()) {
        output.writeString(10, getRealname());
      }
      if (hasPassword()) {
        output.writeString(11, getPassword());
      }
      if (hasSockshost()) {
        output.writeString(12, getSockshost());
      }
      if (hasSocksport()) {
        output.writeInt32(13, getSocksport());
      }
      if (hasSocksuser()) {
        output.writeString(14, getSocksuser());
      }
      if (hasSockspass()) {
        output.writeString(15, getSockspass());
      }
      if (hasSasluser()) {
        output.writeString(16, getSasluser());
      }
      if (hasSaslpass()) {
        output.writeString(17, getSaslpass());
      }
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasName()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(1, getName());
      }
      if (hasAutoconnect()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(2, getAutoconnect());
      }
      if (hasServer()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(3, getServer());
      }
      if (hasPort()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, getPort());
      }
      if (hasSsl()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(5, getSsl());
      }
      if (hasLogging()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(6, getLogging());
      }
      if (hasNickname()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(7, getNickname());
      }
      if (hasAltnick()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(8, getAltnick());
      }
      if (hasUsername()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(9, getUsername());
      }
      if (hasRealname()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(10, getRealname());
      }
      if (hasPassword()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(11, getPassword());
      }
      if (hasSockshost()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(12, getSockshost());
      }
      if (hasSocksport()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(13, getSocksport());
      }
      if (hasSocksuser()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(14, getSocksuser());
      }
      if (hasSockspass()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(15, getSockspass());
      }
      if (hasSasluser()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(16, getSasluser());
      }
      if (hasSaslpass()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(17, getSaslpass());
      }
      memoizedSerializedSize = size;
      return size;
    }
    
    public static com.hanhuy.android.irc.ConfigData.Server parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.hanhuy.android.irc.ConfigData.Server parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.hanhuy.android.irc.ConfigData.Server parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.hanhuy.android.irc.ConfigData.Server parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.hanhuy.android.irc.ConfigData.Server parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.hanhuy.android.irc.ConfigData.Server parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.hanhuy.android.irc.ConfigData.Server parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.hanhuy.android.irc.ConfigData.Server parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.hanhuy.android.irc.ConfigData.Server parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.hanhuy.android.irc.ConfigData.Server parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.hanhuy.android.irc.ConfigData.Server prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.hanhuy.android.irc.ConfigData.Server, Builder> {
      private com.hanhuy.android.irc.ConfigData.Server result;
      
      // Construct using com.hanhuy.android.irc.ConfigData.Server.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new com.hanhuy.android.irc.ConfigData.Server();
        return builder;
      }
      
      protected com.hanhuy.android.irc.ConfigData.Server internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new com.hanhuy.android.irc.ConfigData.Server();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.hanhuy.android.irc.ConfigData.Server getDefaultInstanceForType() {
        return com.hanhuy.android.irc.ConfigData.Server.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public com.hanhuy.android.irc.ConfigData.Server build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private com.hanhuy.android.irc.ConfigData.Server buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public com.hanhuy.android.irc.ConfigData.Server buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        com.hanhuy.android.irc.ConfigData.Server returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.hanhuy.android.irc.ConfigData.Server other) {
        if (other == com.hanhuy.android.irc.ConfigData.Server.getDefaultInstance()) return this;
        if (other.hasName()) {
          setName(other.getName());
        }
        if (other.hasAutoconnect()) {
          setAutoconnect(other.getAutoconnect());
        }
        if (other.hasServer()) {
          setServer(other.getServer());
        }
        if (other.hasPort()) {
          setPort(other.getPort());
        }
        if (other.hasSsl()) {
          setSsl(other.getSsl());
        }
        if (other.hasLogging()) {
          setLogging(other.getLogging());
        }
        if (other.hasNickname()) {
          setNickname(other.getNickname());
        }
        if (other.hasAltnick()) {
          setAltnick(other.getAltnick());
        }
        if (other.hasUsername()) {
          setUsername(other.getUsername());
        }
        if (other.hasRealname()) {
          setRealname(other.getRealname());
        }
        if (other.hasPassword()) {
          setPassword(other.getPassword());
        }
        if (other.hasSockshost()) {
          setSockshost(other.getSockshost());
        }
        if (other.hasSocksport()) {
          setSocksport(other.getSocksport());
        }
        if (other.hasSocksuser()) {
          setSocksuser(other.getSocksuser());
        }
        if (other.hasSockspass()) {
          setSockspass(other.getSockspass());
        }
        if (other.hasSasluser()) {
          setSasluser(other.getSasluser());
        }
        if (other.hasSaslpass()) {
          setSaslpass(other.getSaslpass());
        }
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              return this;
            default: {
              if (!parseUnknownField(input, extensionRegistry, tag)) {
                return this;
              }
              break;
            }
            case 10: {
              setName(input.readString());
              break;
            }
            case 16: {
              setAutoconnect(input.readBool());
              break;
            }
            case 26: {
              setServer(input.readString());
              break;
            }
            case 32: {
              setPort(input.readInt32());
              break;
            }
            case 40: {
              setSsl(input.readBool());
              break;
            }
            case 48: {
              setLogging(input.readBool());
              break;
            }
            case 58: {
              setNickname(input.readString());
              break;
            }
            case 66: {
              setAltnick(input.readString());
              break;
            }
            case 74: {
              setUsername(input.readString());
              break;
            }
            case 82: {
              setRealname(input.readString());
              break;
            }
            case 90: {
              setPassword(input.readString());
              break;
            }
            case 98: {
              setSockshost(input.readString());
              break;
            }
            case 104: {
              setSocksport(input.readInt32());
              break;
            }
            case 114: {
              setSocksuser(input.readString());
              break;
            }
            case 122: {
              setSockspass(input.readString());
              break;
            }
            case 130: {
              setSasluser(input.readString());
              break;
            }
            case 138: {
              setSaslpass(input.readString());
              break;
            }
          }
        }
      }
      
      
      // required string name = 1;
      public boolean hasName() {
        return result.hasName();
      }
      public java.lang.String getName() {
        return result.getName();
      }
      public Builder setName(java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasName = true;
        result.name_ = value;
        return this;
      }
      public Builder clearName() {
        result.hasName = false;
        result.name_ = getDefaultInstance().getName();
        return this;
      }
      
      // required bool autoconnect = 2 [default = true];
      public boolean hasAutoconnect() {
        return result.hasAutoconnect();
      }
      public boolean getAutoconnect() {
        return result.getAutoconnect();
      }
      public Builder setAutoconnect(boolean value) {
        result.hasAutoconnect = true;
        result.autoconnect_ = value;
        return this;
      }
      public Builder clearAutoconnect() {
        result.hasAutoconnect = false;
        result.autoconnect_ = true;
        return this;
      }
      
      // required string server = 3;
      public boolean hasServer() {
        return result.hasServer();
      }
      public java.lang.String getServer() {
        return result.getServer();
      }
      public Builder setServer(java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasServer = true;
        result.server_ = value;
        return this;
      }
      public Builder clearServer() {
        result.hasServer = false;
        result.server_ = getDefaultInstance().getServer();
        return this;
      }
      
      // required int32 port = 4 [default = 6667];
      public boolean hasPort() {
        return result.hasPort();
      }
      public int getPort() {
        return result.getPort();
      }
      public Builder setPort(int value) {
        result.hasPort = true;
        result.port_ = value;
        return this;
      }
      public Builder clearPort() {
        result.hasPort = false;
        result.port_ = 6667;
        return this;
      }
      
      // required bool ssl = 5 [default = false];
      public boolean hasSsl() {
        return result.hasSsl();
      }
      public boolean getSsl() {
        return result.getSsl();
      }
      public Builder setSsl(boolean value) {
        result.hasSsl = true;
        result.ssl_ = value;
        return this;
      }
      public Builder clearSsl() {
        result.hasSsl = false;
        result.ssl_ = false;
        return this;
      }
      
      // required bool logging = 6 [default = false];
      public boolean hasLogging() {
        return result.hasLogging();
      }
      public boolean getLogging() {
        return result.getLogging();
      }
      public Builder setLogging(boolean value) {
        result.hasLogging = true;
        result.logging_ = value;
        return this;
      }
      public Builder clearLogging() {
        result.hasLogging = false;
        result.logging_ = false;
        return this;
      }
      
      // required string nickname = 7;
      public boolean hasNickname() {
        return result.hasNickname();
      }
      public java.lang.String getNickname() {
        return result.getNickname();
      }
      public Builder setNickname(java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasNickname = true;
        result.nickname_ = value;
        return this;
      }
      public Builder clearNickname() {
        result.hasNickname = false;
        result.nickname_ = getDefaultInstance().getNickname();
        return this;
      }
      
      // optional string altnick = 8;
      public boolean hasAltnick() {
        return result.hasAltnick();
      }
      public java.lang.String getAltnick() {
        return result.getAltnick();
      }
      public Builder setAltnick(java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasAltnick = true;
        result.altnick_ = value;
        return this;
      }
      public Builder clearAltnick() {
        result.hasAltnick = false;
        result.altnick_ = getDefaultInstance().getAltnick();
        return this;
      }
      
      // required string username = 9 [default = "chirrouser"];
      public boolean hasUsername() {
        return result.hasUsername();
      }
      public java.lang.String getUsername() {
        return result.getUsername();
      }
      public Builder setUsername(java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasUsername = true;
        result.username_ = value;
        return this;
      }
      public Builder clearUsername() {
        result.hasUsername = false;
        result.username_ = getDefaultInstance().getUsername();
        return this;
      }
      
      // required string realname = 10 [default = "Chirro FTW"];
      public boolean hasRealname() {
        return result.hasRealname();
      }
      public java.lang.String getRealname() {
        return result.getRealname();
      }
      public Builder setRealname(java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasRealname = true;
        result.realname_ = value;
        return this;
      }
      public Builder clearRealname() {
        result.hasRealname = false;
        result.realname_ = getDefaultInstance().getRealname();
        return this;
      }
      
      // optional string password = 11;
      public boolean hasPassword() {
        return result.hasPassword();
      }
      public java.lang.String getPassword() {
        return result.getPassword();
      }
      public Builder setPassword(java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasPassword = true;
        result.password_ = value;
        return this;
      }
      public Builder clearPassword() {
        result.hasPassword = false;
        result.password_ = getDefaultInstance().getPassword();
        return this;
      }
      
      // optional string sockshost = 12;
      public boolean hasSockshost() {
        return result.hasSockshost();
      }
      public java.lang.String getSockshost() {
        return result.getSockshost();
      }
      public Builder setSockshost(java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasSockshost = true;
        result.sockshost_ = value;
        return this;
      }
      public Builder clearSockshost() {
        result.hasSockshost = false;
        result.sockshost_ = getDefaultInstance().getSockshost();
        return this;
      }
      
      // optional int32 socksport = 13;
      public boolean hasSocksport() {
        return result.hasSocksport();
      }
      public int getSocksport() {
        return result.getSocksport();
      }
      public Builder setSocksport(int value) {
        result.hasSocksport = true;
        result.socksport_ = value;
        return this;
      }
      public Builder clearSocksport() {
        result.hasSocksport = false;
        result.socksport_ = 0;
        return this;
      }
      
      // optional string socksuser = 14;
      public boolean hasSocksuser() {
        return result.hasSocksuser();
      }
      public java.lang.String getSocksuser() {
        return result.getSocksuser();
      }
      public Builder setSocksuser(java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasSocksuser = true;
        result.socksuser_ = value;
        return this;
      }
      public Builder clearSocksuser() {
        result.hasSocksuser = false;
        result.socksuser_ = getDefaultInstance().getSocksuser();
        return this;
      }
      
      // optional string sockspass = 15;
      public boolean hasSockspass() {
        return result.hasSockspass();
      }
      public java.lang.String getSockspass() {
        return result.getSockspass();
      }
      public Builder setSockspass(java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasSockspass = true;
        result.sockspass_ = value;
        return this;
      }
      public Builder clearSockspass() {
        result.hasSockspass = false;
        result.sockspass_ = getDefaultInstance().getSockspass();
        return this;
      }
      
      // optional string sasluser = 16;
      public boolean hasSasluser() {
        return result.hasSasluser();
      }
      public java.lang.String getSasluser() {
        return result.getSasluser();
      }
      public Builder setSasluser(java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasSasluser = true;
        result.sasluser_ = value;
        return this;
      }
      public Builder clearSasluser() {
        result.hasSasluser = false;
        result.sasluser_ = getDefaultInstance().getSasluser();
        return this;
      }
      
      // optional string saslpass = 17;
      public boolean hasSaslpass() {
        return result.hasSaslpass();
      }
      public java.lang.String getSaslpass() {
        return result.getSaslpass();
      }
      public Builder setSaslpass(java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasSaslpass = true;
        result.saslpass_ = value;
        return this;
      }
      public Builder clearSaslpass() {
        result.hasSaslpass = false;
        result.saslpass_ = getDefaultInstance().getSaslpass();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:com.hanhuy.android.irc.Server)
    }
    
    static {
      defaultInstance = new Server(true);
      com.hanhuy.android.irc.ConfigData.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:com.hanhuy.android.irc.Server)
  }
  
  public static final class Preferences extends
      com.google.protobuf.GeneratedMessageLite {
    // Use Preferences.newBuilder() to construct.
    private Preferences() {
      initFields();
    }
    private Preferences(boolean noInit) {}
    
    private static final Preferences defaultInstance;
    public static Preferences getDefaultInstance() {
      return defaultInstance;
    }
    
    public Preferences getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    // repeated .com.hanhuy.android.irc.Server servers = 1;
    public static final int SERVERS_FIELD_NUMBER = 1;
    private java.util.List<com.hanhuy.android.irc.ConfigData.Server> servers_ =
      java.util.Collections.emptyList();
    public java.util.List<com.hanhuy.android.irc.ConfigData.Server> getServersList() {
      return servers_;
    }
    public int getServersCount() { return servers_.size(); }
    public com.hanhuy.android.irc.ConfigData.Server getServers(int index) {
      return servers_.get(index);
    }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      for (com.hanhuy.android.irc.ConfigData.Server element : getServersList()) {
        if (!element.isInitialized()) return false;
      }
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (com.hanhuy.android.irc.ConfigData.Server element : getServersList()) {
        output.writeMessage(1, element);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      for (com.hanhuy.android.irc.ConfigData.Server element : getServersList()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, element);
      }
      memoizedSerializedSize = size;
      return size;
    }
    
    public static com.hanhuy.android.irc.ConfigData.Preferences parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.hanhuy.android.irc.ConfigData.Preferences parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.hanhuy.android.irc.ConfigData.Preferences parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.hanhuy.android.irc.ConfigData.Preferences parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.hanhuy.android.irc.ConfigData.Preferences parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.hanhuy.android.irc.ConfigData.Preferences parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.hanhuy.android.irc.ConfigData.Preferences parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.hanhuy.android.irc.ConfigData.Preferences parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.hanhuy.android.irc.ConfigData.Preferences parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.hanhuy.android.irc.ConfigData.Preferences parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.hanhuy.android.irc.ConfigData.Preferences prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.hanhuy.android.irc.ConfigData.Preferences, Builder> {
      private com.hanhuy.android.irc.ConfigData.Preferences result;
      
      // Construct using com.hanhuy.android.irc.ConfigData.Preferences.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new com.hanhuy.android.irc.ConfigData.Preferences();
        return builder;
      }
      
      protected com.hanhuy.android.irc.ConfigData.Preferences internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new com.hanhuy.android.irc.ConfigData.Preferences();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.hanhuy.android.irc.ConfigData.Preferences getDefaultInstanceForType() {
        return com.hanhuy.android.irc.ConfigData.Preferences.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public com.hanhuy.android.irc.ConfigData.Preferences build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private com.hanhuy.android.irc.ConfigData.Preferences buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public com.hanhuy.android.irc.ConfigData.Preferences buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        if (result.servers_ != java.util.Collections.EMPTY_LIST) {
          result.servers_ =
            java.util.Collections.unmodifiableList(result.servers_);
        }
        com.hanhuy.android.irc.ConfigData.Preferences returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.hanhuy.android.irc.ConfigData.Preferences other) {
        if (other == com.hanhuy.android.irc.ConfigData.Preferences.getDefaultInstance()) return this;
        if (!other.servers_.isEmpty()) {
          if (result.servers_.isEmpty()) {
            result.servers_ = new java.util.ArrayList<com.hanhuy.android.irc.ConfigData.Server>();
          }
          result.servers_.addAll(other.servers_);
        }
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              return this;
            default: {
              if (!parseUnknownField(input, extensionRegistry, tag)) {
                return this;
              }
              break;
            }
            case 10: {
              com.hanhuy.android.irc.ConfigData.Server.Builder subBuilder = com.hanhuy.android.irc.ConfigData.Server.newBuilder();
              input.readMessage(subBuilder, extensionRegistry);
              addServers(subBuilder.buildPartial());
              break;
            }
          }
        }
      }
      
      
      // repeated .com.hanhuy.android.irc.Server servers = 1;
      public java.util.List<com.hanhuy.android.irc.ConfigData.Server> getServersList() {
        return java.util.Collections.unmodifiableList(result.servers_);
      }
      public int getServersCount() {
        return result.getServersCount();
      }
      public com.hanhuy.android.irc.ConfigData.Server getServers(int index) {
        return result.getServers(index);
      }
      public Builder setServers(int index, com.hanhuy.android.irc.ConfigData.Server value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.servers_.set(index, value);
        return this;
      }
      public Builder setServers(int index, com.hanhuy.android.irc.ConfigData.Server.Builder builderForValue) {
        result.servers_.set(index, builderForValue.build());
        return this;
      }
      public Builder addServers(com.hanhuy.android.irc.ConfigData.Server value) {
        if (value == null) {
          throw new NullPointerException();
        }
        if (result.servers_.isEmpty()) {
          result.servers_ = new java.util.ArrayList<com.hanhuy.android.irc.ConfigData.Server>();
        }
        result.servers_.add(value);
        return this;
      }
      public Builder addServers(com.hanhuy.android.irc.ConfigData.Server.Builder builderForValue) {
        if (result.servers_.isEmpty()) {
          result.servers_ = new java.util.ArrayList<com.hanhuy.android.irc.ConfigData.Server>();
        }
        result.servers_.add(builderForValue.build());
        return this;
      }
      public Builder addAllServers(
          java.lang.Iterable<? extends com.hanhuy.android.irc.ConfigData.Server> values) {
        if (result.servers_.isEmpty()) {
          result.servers_ = new java.util.ArrayList<com.hanhuy.android.irc.ConfigData.Server>();
        }
        super.addAll(values, result.servers_);
        return this;
      }
      public Builder clearServers() {
        result.servers_ = java.util.Collections.emptyList();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:com.hanhuy.android.irc.Preferences)
    }
    
    static {
      defaultInstance = new Preferences(true);
      com.hanhuy.android.irc.ConfigData.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:com.hanhuy.android.irc.Preferences)
  }
  
  
  static {
  }
  
  public static void internalForceInit() {}
  
  // @@protoc_insertion_point(outer_class_scope)
}
